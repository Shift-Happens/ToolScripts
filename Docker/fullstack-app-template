version: '3.8'

# FULL-STACK APPLICATION TEMPLATE
# ------------------------------
# This template provides a complete development environment for a full-stack application
# with React frontend, Node.js/Express backend, and PostgreSQL database.
# Includes development tools and production-ready configurations.

services:
  # ----------------------------------------
  # FRONTEND - React application
  # ----------------------------------------
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development # Switch to 'production' for production builds
    container_name: frontend
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:5000/api
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ----------------------------------------
  # BACKEND - Node.js/Express API
  # ----------------------------------------
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development # Switch to 'production' for production builds
    container_name: backend
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - /app/node_modules
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgres://postgres:postgres@db:5432/fullstack_app
      - JWT_SECRET=your_jwt_secret_key_here
      - PORT=5000
      - CORS_ORIGIN=http://localhost:3000
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # ----------------------------------------
  # DATABASE - PostgreSQL
  # ----------------------------------------
  db:
    image: postgres:14-alpine
    container_name: db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=fullstack_app
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ----------------------------------------
  # MIGRATIONS - Database migrations (runs and exits)
  # ----------------------------------------
  migrations:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: migrations
    command: npm run migrate
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/fullstack_app
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  # ----------------------------------------
  # PGADMIN - PostgreSQL administration tool
  # ----------------------------------------
  pgadmin:
    image: dpage/pgadmin4:6.17
    container_name: pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - app-network

  # ----------------------------------------
  # REDIS - For caching and session storage (optional)
  # ----------------------------------------
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ----------------------------------------
  # NGINX - Reverse proxy (for production use)
  # ----------------------------------------
  # Uncomment for production deployment
  # nginx:
  #   image: nginx:alpine
  #   container_name: nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
  #     - ./nginx/ssl:/etc/nginx/ssl
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:

# ----------------------------------------
# DIRECTORY STRUCTURE
# ----------------------------------------
# /
# ├── frontend/                      # React Application
# │   ├── public/                    # Static assets
# │   ├── src/                       # Source code
# │   │   ├── components/            # Reusable components
# │   │   ├── pages/                 # Page components
# │   │   ├── services/              # API service integration
# │   │   ├── context/               # Global state management
# │   │   ├── hooks/                 # Custom React hooks
# │   │   ├── utils/                 # Utility functions
# │   │   ├── App.js                 # Main application component
# │   │   └── index.js               # Entry point
# │   ├── .env                       # Environment variables
# │   ├── package.json               # Node.js dependencies
# │   └── Dockerfile                 # Frontend container configuration
# │
# ├── backend/                       # Node.js/Express API
# │   ├── src/                       # Source code
# │   │   ├── controllers/           # Request handlers
# │   │   ├── models/                # Database models
# │   │   ├── routes/                # API routes
# │   │   ├── middleware/            # Custom middleware
# │   │   ├── services/              # Business logic
# │   │   ├── utils/                 # Utility functions
# │   │   ├── config/                # Configuration
# │   │   └── index.js               # Entry point
# │   ├── migrations/                # Database migrations
# │   ├── .env                       # Environment variables
# │   ├── package.json               # Node.js dependencies
# │   └── Dockerfile                 # Backend container configuration
# │
# ├── db/                            # Database setup
# │   └── init/                      # Initial database scripts
# │       └── 01-init.sql            # Database initialization
# │
# ├── nginx/                         # Nginx configuration (for production)
# │   ├── default.conf               # Nginx server configuration
# │   └── ssl/                       # SSL certificates
# │
# └── docker-compose.yml             # Main configuration file

# ----------------------------------------
# FRONTEND DOCKERFILE
# ----------------------------------------
# ```
# # Frontend Dockerfile

# # Development stage
# FROM node:18-alpine AS development
# WORKDIR /app
# COPY package*.json ./
# RUN npm install
# COPY . .
# EXPOSE 3000
# CMD ["npm", "start"]

# # Build stage
# FROM development AS build
# RUN npm run build

# # Production stage
# FROM nginx:alpine AS production
# COPY --from=build /app/build /usr/share/nginx/html
# COPY nginx/nginx.conf /etc/nginx/conf.d/default.conf
# EXPOSE 80
# CMD ["nginx", "-g", "daemon off;"]
# ```

# ----------------------------------------
# BACKEND DOCKERFILE
# ----------------------------------------
# ```
# # Backend Dockerfile

# # Development stage
# FROM node:18-alpine AS development
# WORKDIR /app
# COPY package*.json ./
# RUN npm install
# COPY . .
# EXPOSE 5000
# CMD ["npm", "run", "dev"]

# # Production stage
# FROM node:18-alpine AS production
# WORKDIR /app
# COPY package*.json ./
# RUN npm ci --only=production
# COPY . .
# RUN npm run build
# EXPOSE 5000
# CMD ["npm", "start"]
# ```

# ----------------------------------------
# EXAMPLE NGINX CONFIG
# ----------------------------------------
# ```
# # nginx/default.conf

# upstream frontend {
#     server frontend:3000;
# }

# upstream backend {
#     server backend:5000;
# }

# server {
#     listen 80;
#     server_name localhost;

#     location / {
#         proxy_pass http://frontend;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#     }

#     location /api {
#         proxy_pass http://backend;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#     }
# }
# ```

# ----------------------------------------
# FRONTEND PACKAGE.JSON EXAMPLE
# ----------------------------------------
# ```json
# {
#   "name": "frontend",
#   "version": "0.1.0",
#   "private": true,
#   "dependencies": {
#     "@testing-library/jest-dom": "^5.16.5",
#     "@testing-library/react": "^13.4.0",
#     "@testing-library/user-event": "^13.5.0",
#     "axios": "^1.3.4",
#     "react": "^18.2.0",
#     "react-dom": "^18.2.0",
#     "react-router-dom": "^6.9.0",
#     "react-scripts": "5.0.1"
#   },
#   "scripts": {
#     "start": "react-scripts start",
#     "build": "react-scripts build",
#     "test": "react-scripts test",
#     "eject": "react-scripts eject"
#   },
#   "eslintConfig": {
#     "extends": [
#       "react-app",
#       "react-app/jest"
#     ]
#   },
#   "browserslist": {
#     "production": [
#       ">0.2%",
#       "not dead",
#       "not op_mini all"
#     ],
#     "development": [
#       "last 1 chrome version",
#       "last 1 firefox version",
#       "last 1 safari version"
#     ]
#   }
# }
# ```

# ----------------------------------------
# BACKEND PACKAGE.JSON EXAMPLE
# ----------------------------------------
# ```json
# {
#   "name": "backend",
#   "version": "1.0.0",
#   "description": "Full-stack app backend",
#   "main": "src/index.js",
#   "scripts": {
#     "start": "node dist/index.js",
#     "dev": "nodemon src/index.js",
#     "build": "babel src -d dist",
#     "test": "jest",
#     "migrate": "knex migrate:latest",
#     "seed": "knex seed:run"
#   },
#   "dependencies": {
#     "bcryptjs": "^2.4.3",
#     "cors": "^2.8.5",
#     "dotenv": "^16.0.3",
#     "express": "^4.18.2",
#     "helmet": "^6.0.1",
#     "jsonwebtoken": "^9.0.0",
#     "knex": "^2.4.2",
#     "morgan": "^1.10.0",
#     "pg": "^8.10.0",
#     "redis": "^4.6.5"
#   },
#   "devDependencies": {
#     "@babel/cli": "^7.21.0",
#     "@babel/core": "^7.21.4",
#     "@babel/preset-env": "^7.21.4",
#     "jest": "^29.5.0",
#     "nodemon": "^2.0.22",
#     "supertest": "^6.3.3"
#   }
# }
# ```

# ----------------------------------------
# SAMPLE DATABASE INITIALIZATION (db/init/01-init.sql)
# ----------------------------------------
# ```sql
# -- Create users table
# CREATE TABLE IF NOT EXISTS users (
#   id SERIAL PRIMARY KEY,
#   username VARCHAR(50) UNIQUE NOT NULL,
#   email VARCHAR(100) UNIQUE NOT NULL,
#   password VARCHAR(100) NOT NULL,
#   created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
#   updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
# );

# -- Create posts table
# CREATE TABLE IF NOT EXISTS posts (
#   id SERIAL PRIMARY KEY,
#   title VARCHAR(100) NOT NULL,
#   content TEXT NOT NULL,
#   user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
#   created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
#   updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
# );

# -- Create comments table
# CREATE TABLE IF NOT EXISTS comments (
#   id SERIAL PRIMARY KEY,
#   content TEXT NOT NULL,
#   user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
#   post_id INTEGER REFERENCES posts(id) ON DELETE CASCADE,
#   created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
#   updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
# );

# -- Create indexes
# CREATE INDEX idx_posts_user_id ON posts(user_id);
# CREATE INDEX idx_comments_post_id ON comments(post_id);
# CREATE INDEX idx_comments_user_id ON comments(user_id);

# -- Insert sample data
# INSERT INTO users (username, email, password) VALUES
# ('admin', 'admin@example.com', '$2a$10$HxldLcgObkXrHKuPz8oNuupXXYMkCthzI2DFB0hT.U39DOVv/9mCm'), -- password: admin123
# ('user1', 'user1@example.com', '$2a$10$IEEz3dk2N.YIvna5eh2IweJHFoIDCNdVDUxROa/0MmFz9yUTgXIwG'); -- password: user123
# ```

# ----------------------------------------
# USAGE INSTRUCTIONS
# ----------------------------------------
# 1. Create the directory structure as shown above
# 2. Create the Dockerfiles and configuration files
# 3. Set up the appropriate .env files for frontend and backend
# 4. Run the application:
#    $ docker-compose up -d
# 5. Access the application:
#    - Frontend: http://localhost:3000
#    - Backend API: http://localhost:5000/api
#    - PostgreSQL Admin: http://localhost:5050
# 6. To shut down:
#    $ docker-compose down
# 7. To rebuild containers after changes:
#    $ docker-compose up -d --build
