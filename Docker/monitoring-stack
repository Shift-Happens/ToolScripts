version: '3.8'

# Complete Monitoring Stack with Prometheus, Grafana, cAdvisor, and Node Exporter
# This stack provides comprehensive monitoring for containerized applications
# and the underlying infrastructure.

services:
  # =============================================================================
  # PROMETHEUS - Metrics collection and storage
  # =============================================================================
  prometheus:
    image: prom/prometheus:v2.42.0
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # GRAFANA - Dashboards and visualizations
  # =============================================================================
  grafana:
    image: grafana/grafana:9.5.1
    container_name: grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      - GF_SMTP_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    ports:
      - "3000:3000"
    networks:
      - monitoring
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # CADVISOR - Container metrics collection
  # =============================================================================
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    networks:
      - monitoring
    depends_on:
      - prometheus
    command:
      - '--docker_only=true'
      - '--housekeeping_interval=10s'
      - '--max_housekeeping_interval=15s'
      - '--allow_dynamic_housekeeping=true'
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # NODE EXPORTER - Host metrics collection
  # =============================================================================
  node-exporter:
    image: prom/node-exporter:v1.5.0
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # =============================================================================
  # ALERTMANAGER - Handles alerts from Prometheus
  # =============================================================================
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: alertmanager
    restart: unless-stopped
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    networks:
      - monitoring
    depends_on:
      - prometheus

  # =============================================================================
  # LOKI - Log aggregation system
  # =============================================================================
  loki:
    image: grafana/loki:2.8.0
    container_name: loki
    restart: unless-stopped
    volumes:
      - ./loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    ports:
      - "3100:3100"
    networks:
      - monitoring
    command: -config.file=/etc/loki/local-config.yaml

  # =============================================================================
  # PROMTAIL - Log collector for Loki
  # =============================================================================
  promtail:
    image: grafana/promtail:2.8.0
    container_name: promtail
    restart: unless-stopped
    volumes:
      - ./promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring
    depends_on:
      - loki

networks:
  monitoring:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  loki_data:

# =============================================================================
# CONFIGURATION FILES NEEDED TO COMPLETE SETUP
# =============================================================================
# ./prometheus/prometheus.yml
# ```yaml
# global:
#   scrape_interval: 15s
#   evaluation_interval: 15s
#   scrape_timeout: 10s
# 
# alerting:
#   alertmanagers:
#     - static_configs:
#         - targets: ['alertmanager:9093']
# 
# rule_files:
#   - "/etc/prometheus/rules/*.yml"
# 
# scrape_configs:
#   - job_name: 'prometheus'
#     static_configs:
#       - targets: ['localhost:9090']
# 
#   - job_name: 'cadvisor'
#     static_configs:
#       - targets: ['cadvisor:8080']
# 
#   - job_name: 'node-exporter'
#     static_configs:
#       - targets: ['node-exporter:9100']
# 
#   - job_name: 'your-app'
#     static_configs:
#       - targets: ['your-app:8000']  # Replace with your app's host:port
# ```
# 
# ./alertmanager/alertmanager.yml
# ```yaml
# global:
#   resolve_timeout: 5m
#   smtp_smarthost: 'smtp.example.com:587'
#   smtp_from: 'alertmanager@example.com'
#   smtp_auth_username: 'username'
#   smtp_auth_password: 'password'
# 
# route:
#   group_by: ['alertname', 'job']
#   group_wait: 30s
#   group_interval: 5m
#   repeat_interval: 4h
#   receiver: 'email-notifications'
# 
# receivers:
#   - name: 'email-notifications'
#     email_configs:
#       - to: 'alerts@example.com'
#         send_resolved: true
# 
#   - name: 'slack-notifications'
#     slack_configs:
#       - api_url: 'https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX'
#         channel: '#monitoring'
#         send_resolved: true
# ```
# 
# ./grafana/provisioning/datasources/datasource.yml
# ```yaml
# apiVersion: 1
# 
# datasources:
#   - name: Prometheus
#     type: prometheus
#     access: proxy
#     url: http://prometheus:9090
#     isDefault: true
# 
#   - name: Loki
#     type: loki
#     access: proxy
#     url: http://loki:3100
# ```
# 
# ./loki/loki-config.yml
# ```yaml
# auth_enabled: false
# 
# server:
#   http_listen_port: 3100
#   grpc_listen_port: 9096
# 
# ingester:
#   lifecycler:
#     address: 127.0.0.1
#     ring:
#       kvstore:
#         store: inmemory
#       replication_factor: 1
#     final_sleep: 0s
#   chunk_idle_period: 1h
#   max_chunk_age: 1h
#   chunk_target_size: 1048576
#   chunk_retain_period: 30s
#   max_transfer_retries: 0
# 
# schema_config:
#   configs:
#     - from: 2020-10-24
#       store: boltdb-shipper
#       object_store: filesystem
#       schema: v11
#       index:
#         prefix: index_
#         period: 24h
# 
# storage_config:
#   boltdb_shipper:
#     active_index_directory: /loki/boltdb-shipper-active
#     cache_location: /loki/boltdb-shipper-cache
#     cache_ttl: 24h
#     shared_store: filesystem
#   filesystem:
#     directory: /loki/chunks
# 
# compactor:
#   working_directory: /tmp/loki/boltdb-shipper-compactor
#   shared_store: filesystem
# 
# limits_config:
#   reject_old_samples: true
#   reject_old_samples_max_age: 168h
# 
# chunk_store_config:
#   max_look_back_period: 0s
# 
# table_manager:
#   retention_deletes_enabled: false
#   retention_period: 0s
# ```
# 
# ./promtail/promtail-config.yml
# ```yaml
# server:
#   http_listen_port: 9080
#   grpc_listen_port: 0
# 
# positions:
#   filename: /tmp/positions.yaml
# 
# clients:
#   - url: http://loki:3100/loki/api/v1/push
# 
# scrape_configs:
#   - job_name: system
#     static_configs:
#       - targets:
#           - localhost
#         labels:
#           job: varlogs
#           __path__: /var/log/*log
# 
#   - job_name: containers
#     static_configs:
#       - targets:
#           - localhost
#         labels:
#           job: containerlogs
#           __path__: /var/lib/docker/containers/*/*log
# 
#     pipeline_stages:
#       - json:
#           expressions:
#             output: log
#             stream: stream
#             attrs: attrs
#       - labels:
#           stream:
#       - output:
#           source: output
# ```
